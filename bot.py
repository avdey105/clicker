import logging
import sqlite3
import pandas as pd
import io
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, Filters, ConversationHandler, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WALLET_ADDRESS, CONFIRM_WALLET_CHANGE, ADMIN_PASSWORD, ADMIN_BROADCAST, ADMIN_USER_INFO, ADMIN_MODIFY_COINS, ADMIN_MODIFY_COINS_AMOUNT = range(7)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è callback_data
PROFILE, WALLET, REFERRAL = "profile", "wallet", "referral"

# –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_PASSWORD_VALUE = "g23qsUFO"

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def with_database(func):
    def wrapper(*args, **kwargs):
        conn = sqlite3.connect('users.db')
        try:
            return func(conn, *args, **kwargs)
        finally:
            conn.close()
    return wrapper

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@with_database
def setup_database(conn):
    conn.cursor().execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        wallet_address TEXT DEFAULT NULL,
        coins INTEGER DEFAULT 10,
        referrer_id INTEGER DEFAULT NULL,
        referral_code TEXT DEFAULT NULL
    )
    ''')
    conn.commit()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@with_database
def register_user(conn, user_id, username, referrer_id=None):
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone():
        return False
    import uuid
    referral_code = str(uuid.uuid4())[:8]
    cursor.execute("INSERT INTO users (user_id, username, coins, referrer_id, referral_code) VALUES (?, ?, ?, ?, ?)",
                   (user_id, username, 10, referrer_id, referral_code))
    if referrer_id:
        cursor.execute("UPDATE users SET coins = coins + 5 WHERE user_id = ?", (referrer_id,))
    conn.commit()
    return True

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data=PROFILE),
         InlineKeyboardButton("üí∞ –ö–æ—à–µ–ª–µ–∫", callback_data=WALLET)],
        [InlineKeyboardButton("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data=REFERRAL)]
    ])

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def send_main_menu(update, context, message):
    update.message.reply_text(message, reply_markup=get_main_keyboard(), parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    user_id, username = user.id, user.username or f"{user.first_name} {user.last_name}".strip()
    referrer_id = None
    if context.args:
        with sqlite3.connect('users.db') as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT user_id FROM users WHERE referral_code = ?", (context.args[0],))
            result = cursor.fetchone()
            referrer_id = result[0] if result else None
    is_new = register_user(user_id, username, referrer_id)
    message = (f"üç≠ –ü—Ä–∏–≤–µ—Ç, {username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É-–∫–ª–∏–∫–µ—Ä ChupsCoin! üç≠\n\n"
               "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 10 –º–æ–Ω–µ—Ç –Ω–∞ —Å—á–µ—Ç—É! ü™ô\n\n"
               "üéÆ –ß—Ç–æ —ç—Ç–æ –∑–∞ –∏–≥—Ä–∞?\n"
               "‚Ä¢ –•–ª–æ–ø–∞–π—Ç–µ –ß—É–ø–∞-—á—É–ø—Å–∞ –ø–æ –∂–æ–ø–µ –∏ –∫–æ–ø–∏—Ç–µ –º–æ–Ω–µ—Ç–∫–∏!\n"
               "‚Ä¢ –í —Ä–∞–∑–¥–µ–ª–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –∏ –≤—Ä–µ–º—è –¥–æ —Ä–∞–∑–¥–∞—á–∏\n"
               "‚Ä¢ –ù–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n\n"
               "üíé –°–∫–æ—Ä–æ –º—ã –≤—ã–ø—É—Å—Ç–∏–º —Å–≤–æ–π —Ç–æ–∫–µ–Ω! –ù–µ —Å–ø–µ—à–∏—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –µ–≥–æ —Å—Ä–∞–∑—É - –º—ã –±—É–¥–µ–º:\n"
               "‚Ä¢ –£—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ø—Ä–∏–∫–æ–ª—é—Ö–∏\n"
               "‚Ä¢ –ü–∞–º–ø–∏—Ç—å —Ü–µ–Ω—É\n"
               "‚Ä¢ –í—ã–≤–æ–¥–∏—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞ –±–∏—Ä–∂—É\n"
               "‚Ä¢ –ù–∞—à–∞ —Ü–µ–ª—å - 1$ –∑–∞ 1 –º–æ–Ω–µ—Ç—É!\n\n"
               "‚ö†Ô∏è –í–∞–∂–Ω–æ! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ—à–µ–ª–µ–∫ TON Keeper. –ï—Å–ª–∏ –ø—Ä–∏ —Ä–∞–∑–¥–∞—á–µ –∫–æ—à–µ–ª–µ–∫ –Ω–µ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω, —Ç–æ–∫–µ–Ω—ã –Ω–µ –ø—Ä–∏–¥—É—Ç!\n\n"
               "üì¢ –í—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ: [ChupsCoin](https://t.me/ChupsCoin)") if is_new else (
        f"üç≠ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {username}!\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ö–ª–æ–ø–∞—Ç—å –ß—É–ø–∞-—á—É–ø—Å–∞ –ø–æ –∂–æ–ø–µ –∏ –∫–æ–ø–∏—Ç—å –º–æ–Ω–µ—Ç–∫–∏!\n"
        "üì¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –∫–∞–Ω–∞–ª–µ: [ChupsCoin](https://t.me/ChupsCoin)")
    send_main_menu(update, context, message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
@with_database
def profile_callback(conn, update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    user_id = query.from_user.id
    cursor = conn.cursor()
    cursor.execute("SELECT username, wallet_address, coins FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()
    cursor.execute("SELECT COUNT(*) FROM users WHERE referrer_id = ?", (user_id,))
    referrals_count = cursor.fetchone()[0]
    message = (f"üìä –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data[0]}:\n\nü™ô –ú–æ–Ω–µ—Ç—ã: {user_data[2]}\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals_count}\n"
               f"üíº –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {user_data[1] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n" + ("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ö–æ—à–µ–ª–µ–∫', —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞." if not user_data[1] else "")) if user_data else (
        "–û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    query.edit_message_text(text=message, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ö–æ—à–µ–ª–µ–∫"
def wallet_callback(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    user_id = query.from_user.id
    context.user_data.update({'message_id': query.message.message_id, 'chat_id': query.message.chat_id})
    with sqlite3.connect('users.db') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT wallet_address FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
    if result and result[0]:
        query.edit_message_text(
            text=f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–æ—à–µ–ª–µ–∫: {result[0]}\n\n–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞?",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞, –∏–∑–º–µ–Ω–∏—Ç—å", callback_data="change_wallet_yes"),
                                               InlineKeyboardButton("–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="change_wallet_no")]]))
        return CONFIRM_WALLET_CHANGE
    query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")
    return WALLET_ADDRESS

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã –∫–æ—à–µ–ª—å–∫–∞
def confirm_wallet_change(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    if query.data == "change_wallet_yes":
        query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        return WALLET_ADDRESS
    query.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º.", reply_markup=get_main_keyboard())
    return ConversationHandler.END

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
@with_database
def save_wallet_address(conn, update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    wallet_address = update.message.text
    conn.cursor().execute("UPDATE users SET wallet_address = ? WHERE user_id = ?", (wallet_address, user_id))
    conn.commit()
    update.message.reply_text(f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {wallet_address}", reply_markup=get_main_keyboard())
    if 'message_id' in context.user_data:
        try:
            context.bot.delete_message(chat_id=context.user_data['chat_id'], message_id=context.user_data['message_id'])
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"
@with_database
def referral_callback(conn, update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    user_id = query.from_user.id
    cursor = conn.cursor()
    cursor.execute("SELECT referral_code FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if result:
        referral_link = f"https://t.me/{context.bot.username}?start={result[0]}"
        message = f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n`{referral_link}`\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏. –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 5 –º–æ–Ω–µ—Ç!"
        query.edit_message_text(text=message, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back")]]), parse_mode='Markdown')
    else:
        query.edit_message_text("–û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=get_main_keyboard())

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
def back_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
def button_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    data = query.data
    if data == PROFILE:
        profile_callback(update, context)
    elif data == REFERRAL:
        referral_callback(update, context)
    elif data == "back":
        back_callback(update, context)

# –ö–æ–º–∞–Ω–¥–∞ /admin
def admin_command(update: Update, context: CallbackContext) -> int:
    message = update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    context.user_data['admin_password_message_id'] = message.message_id
    return ADMIN_PASSWORD

# –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def show_admin_menu(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="admin_broadcast")],
        [InlineKeyboardButton("üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", callback_data="admin_user_info")],
        [InlineKeyboardButton("ü™ô –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç", callback_data="admin_modify_coins")],
        [InlineKeyboardButton("üìä –í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export_db")],
        [InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_exit")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = "‚úÖ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if update.callback_query:
        update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        update.message.reply_text(text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def admin_button_callback(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    if not context.user_data.get('is_admin', False):
        query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return ConversationHandler.END
    action = query.data
    if action == "admin_broadcast":
        query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin_back")]]))
        return ADMIN_BROADCAST
    elif action == "admin_user_info":
        query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin_back")]]))
        return ADMIN_USER_INFO
    elif action == "admin_modify_coins":
        query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username), –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç:", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin_back")]]))
        return ADMIN_MODIFY_COINS
    elif action == "admin_export_db":
        export_database(update, context)
        return ConversationHandler.END
    elif action == "admin_exit":
        context.user_data['is_admin'] = False
        query.edit_message_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        user = update.effective_user
        username = user.username or f"{user.first_name} {user.last_name}".strip()
        message = f"üç≠ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {username}!\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ö–ª–æ–ø–∞—Ç—å –ß—É–ø–∞-—á—É–ø—Å–∞ –ø–æ –∂–æ–ø–µ –∏ –∫–æ–ø–∏—Ç—å –º–æ–Ω–µ—Ç–∫–∏!\nüì¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –∫–∞–Ω–∞–ª–µ: [ChupsCoin](https://t.me/ChupsCoin)"
        context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=get_main_keyboard(), parse_mode='Markdown')
        return ConversationHandler.END
    elif action == "admin_back":
        show_admin_menu(update, context)
        return ConversationHandler.END

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@with_database
def admin_get_user_info(conn, update: Update, context: CallbackContext) -> int:
    user_identifier = update.message.text.strip()
    cursor = conn.cursor()
    try:
        if user_identifier.isdigit():
            cursor.execute("SELECT * FROM users WHERE user_id = ?", (int(user_identifier),))
        else:
            user_identifier = user_identifier[1:] if user_identifier.startswith('@') else user_identifier
            cursor.execute("SELECT * FROM users WHERE username = ?", (user_identifier,))
        user_data = cursor.fetchone() or cursor.execute("SELECT * FROM users WHERE username LIKE ?", (f"%{user_identifier}%",)).fetchone()
        if user_data:
            user_id, username, wallet_address, coins, referrer_id, referral_code = user_data
            cursor.execute("SELECT COUNT(*) FROM users WHERE referrer_id = ?", (user_id,))
            referrals_count = cursor.fetchone()[0]
            message = (f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\nüÜî ID: {user_id}\nüë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}\nü™ô –ú–æ–Ω–µ—Ç—ã: {coins}\n"
                       f"üíº –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {wallet_address or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals_count}\nüîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {referral_code}\n")
            if referrer_id:
                cursor.execute("SELECT username FROM users WHERE user_id = ?", (referrer_id,))
                referrer = cursor.fetchone()
                if referrer:
                    message += f"üëë –ü—Ä–∏–≥–ª–∞—Å–∏–ª: {referrer[0]} (ID: {referrer_id})\n"
        else:
            message = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        update.message.reply_text(message)
        show_admin_menu(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
        show_admin_menu(update, context)
    return ConversationHandler.END

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–æ–Ω–µ—Ç (—à–∞–≥ 1)
@with_database
def admin_modify_user_coins(conn, update: Update, context: CallbackContext) -> int:
    user_identifier = update.message.text.strip()
    cursor = conn.cursor()
    try:
        if user_identifier.isdigit():
            cursor.execute("SELECT user_id, username, coins FROM users WHERE user_id = ?", (int(user_identifier),))
        else:
            user_identifier = user_identifier[1:] if user_identifier.startswith('@') else user_identifier
            cursor.execute("SELECT user_id, username, coins FROM users WHERE username = ?", (user_identifier,))
        user_data = cursor.fetchone() or cursor.execute("SELECT user_id, username, coins FROM users WHERE username LIKE ?", (f"%{user_identifier}%",)).fetchone()
        if user_data:
            context.user_data.update({'target_user_id': user_data[0], 'target_username': user_data[1], 'current_coins': user_data[2]})
            update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data[1]}\n–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç: {user_data[2]}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +10 –∏–ª–∏ -5):",
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin_back")]]))
            return ADMIN_MODIFY_COINS_AMOUNT
        update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        show_admin_menu(update, context)
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        show_admin_menu(update, context)
        return ConversationHandler.END

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–æ–Ω–µ—Ç (—à–∞–≥ 2)
@with_database
def admin_update_user_coins(conn, update: Update, context: CallbackContext) -> int:
    coins_input = update.message.text.strip()
    target_user_id = context.user_data.get('target_user_id')
    if not target_user_id:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
        show_admin_menu(update, context)
        return ConversationHandler.END
    try:
        current_coins = context.user_data['current_coins']
        new_coins = current_coins + int(coins_input) if coins_input[0] in ['+', '-'] else int(coins_input)
        new_coins = max(0, new_coins)
        conn.cursor().execute("UPDATE users SET coins = ? WHERE user_id = ?", (new_coins, target_user_id))
        conn.commit()
        update.message.reply_text(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context.user_data['target_username']} (ID: {target_user_id}) –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n–ë—ã–ª–æ: {current_coins}\n–°—Ç–∞–ª–æ: {new_coins}")
        show_admin_menu(update, context)
    except ValueError:
        update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +10 –∏–ª–∏ -5).")
        show_admin_menu(update, context)
    finally:
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—Å—Ç–∞–≤–ª—è—è is_admin
        context.user_data.pop('target_user_id', None)
        context.user_data.pop('target_username', None)
        context.user_data.pop('current_coins', None)
    return ConversationHandler.END

# –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def export_database(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    with sqlite3.connect('users.db') as conn:
        users_df = pd.read_sql_query("SELECT * FROM users", conn)
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        users_df.to_excel(writer, sheet_name='Users', index=False)
    output.seek(0)
    context.bot.send_document(chat_id=query.message.chat_id, document=output, filename='users_database.xlsx', caption="üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    query.answer()
    keyboard = [
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="admin_broadcast")],
        [InlineKeyboardButton("üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", callback_data="admin_user_info")],
        [InlineKeyboardButton("ü™ô –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç", callback_data="admin_modify_coins")],
        [InlineKeyboardButton("üìä –í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export_db")],
        [InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_exit")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.bot.send_message(chat_id=query.message.chat_id, text="‚úÖ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def check_admin_password(update: Update, context: CallbackContext) -> int:
    if update.message.text == ADMIN_PASSWORD_VALUE:
        context.user_data['is_admin'] = True
        show_admin_menu(update, context)
        try:
            update.message.delete()
            context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data.pop('admin_password_message_id'))
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    else:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        try:
            update.message.delete()
            context.bot.delete_message(chat_id=update.effective_chat.id, message_id=context.user_data.pop('admin_password_message_id'))
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    return ConversationHandler.END

# –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@with_database
def admin_broadcast_message(conn, update: Update, context: CallbackContext) -> int:
    message = update.message.text
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    success_count, fail_count = 0, 0
    for user in users:
        try:
            context.bot.send_message(chat_id=user[0], text=message)
            success_count += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            fail_count += 1
    update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n‚ùå –û—à–∏–±–æ–∫: {fail_count}\n\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –ø–æ–º–æ—â—å—é /admin")
    return ConversationHandler.END

# –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def unknown_message(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    username = user.username or f"{user.first_name} {user.last_name}".strip()
    update.message.reply_text("ü§î –û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ. –û—Ç–∫—Ä—ã–≤–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    message = f"üç≠ –ü—Ä–∏–≤–µ—Ç, {username}!\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ö–ª–æ–ø–∞—Ç—å –ß—É–ø–∞-—á—É–ø—Å–∞ –ø–æ –∂–æ–ø–µ –∏ –∫–æ–ø–∏—Ç—å –º–æ–Ω–µ—Ç–∫–∏!\nüì¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –∫–∞–Ω–∞–ª–µ: [ChupsCoin](https://t.me/ChupsCoin)"
    send_main_menu(update, context, message)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    setup_database()
    updater = Updater("–ê–ë–†–ê–ö–ê–î–ê–ë–†–ê")
    dp = updater.dispatcher
    updater.bot.delete_webhook()
    dp.add_error_handler(lambda u, c: logger.error(f"–û—à–∏–±–∫–∞: {c.error}"))
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(ConversationHandler(
        entry_points=[CommandHandler("admin", admin_command), CallbackQueryHandler(admin_button_callback, pattern="^admin_")],
        states={
            ADMIN_PASSWORD: [MessageHandler(Filters.text & ~Filters.command, check_admin_password)],
            ADMIN_BROADCAST: [MessageHandler(Filters.text & ~Filters.command, admin_broadcast_message)],
            ADMIN_USER_INFO: [MessageHandler(Filters.text & ~Filters.command, admin_get_user_info)],
            ADMIN_MODIFY_COINS: [MessageHandler(Filters.text & ~Filters.command, admin_modify_user_coins)],
            ADMIN_MODIFY_COINS_AMOUNT: [MessageHandler(Filters.text & ~Filters.command, admin_update_user_coins)],
        },
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END), CallbackQueryHandler(admin_button_callback, pattern="^admin_")],
        per_message=False
    ))
    dp.add_handler(ConversationHandler(
        entry_points=[CallbackQueryHandler(wallet_callback, pattern=f"^{WALLET}$")],
        states={
            WALLET_ADDRESS: [MessageHandler(Filters.text & ~Filters.command, save_wallet_address)],
            CONFIRM_WALLET_CHANGE: [CallbackQueryHandler(confirm_wallet_change, pattern="^change_wallet_(yes|no)$")],
        },
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)]
    ))
    dp.add_handler(CallbackQueryHandler(button_callback))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, unknown_message))
    updater.start_polling(drop_pending_updates=True, allowed_updates=['message', 'callback_query'])
    updater.idle()

if __name__ == '__main__':
    main()
